(define (make-interval a b) (cons a b))
(define (upper-bound x) (max (car x) (cdr x)))
(define (lower-bound x) (min (car x) (cdr x)))

(define (interval-contains0? y)
     (cond  ((and (< (lower-bound y) 0) (< 0 (upper-bound y))) true)
            ((or (= (lower-bound y) 0) (= (upper-bound y) 0)) true)
            (else false)))

(define (mul-interval x y)
    (let (  (p1 (* (lower-bound x) (lower-bound y)))
            (p2 (* (lower-bound x) (upper-bound y)))
            (p3 (* (upper-bound x) (lower-bound y)))
            (p4 (* (upper-bound x) (upper-bound y))))
        (cond   ((and (< (upper-bound x) 0) (< (upper-bound y) 0)) (make-interval p4 p1))
                ((and (< (upper-bound x) 0) (interval-contains0? y)) (make-interval p2 p3))
                ((and (< (upper-bound x) 0) (> (lower-bound y) 0)) (make-interval p2 p3))
                ((and (interval-contains0? x) (< (upper-bound y) 0)) (make-interval p4 p1))
                ((and (interval-contains0? x) (interval-contains0? y)) (make-interval (min p2 p4) (max p1 p3)))
                ((and (interval-contains0? x) (> (lower-bound y) 0)) (make-interval p1 p4))
                ((and (> (lower-bound x) 0) (< (upper-bound y) 0)) (make-interval p3 p2))
                ((and (> (lower-bound x) 0) (interval-contains0? y)) (make-interval p3 p4))
                ((and (> (lower-bound x) 0) (> (upper-bound y) 0)) (make-interval p1 p4)))))
    